install.packages("plotly",dependencies = TRUE)
library(plotly)
install.packages("lattice",dependencies = TRUE)
library(lattice)
a<-5
rm(list= ls(all = TRUE))
graphics.off()
cat("\014")
print(iris)
dim(iris)
irid[1:7,]
iris[1:7,]
iris[,'Species']
iris$Species
my.iris <-iris
cat("\014")
ls()
rm(my.iris)
ls()
dim(df) #Dimenson del df
rm(list=ls(all=TRUE))
graphics.off()
cat("\014")
# Librerias Utilizadas en el proyecto
library(ggplot2)
library(cowplot)
library(patchwork)
# -----   CARGA DE DATOS.   -----
setwd("~/Desktop/1ACC0216-TB1-2025-1/data") #Directorio
df <- read.csv("hotel_bookings.csv", header=TRUE, stringsAsFactors = FALSE)
summary(df) # Resumen estadistico
str(df) #Estructura de los datos
colSums(is.na(df))
sapply(df,class)
library(VIM)
install.packages("VIM")
library(VIM)
aggr(df,numbers = T, sortVar=T)
duplicated(df)
table(duplicated(df))
df[duplicated(df)]
df[duplicated(df),]
df<- unique(df)
table(duplicated(df)) #Verificamos nuevamente los valores duplicados
glimpse(df)
# Resumen
summary(df)
#Cambio de los tipos de datos
# Lista de columnas categóricas
categorical_cols <- c(
"hotel", "meal", "country", "market_segment",
"distribution_channel", "is_repeated_guest", "reserved_room_type", "assigned_room_type",
"deposit_type", "agent", "company", "customer_type", "reservation_status"
)
# Convertir cada columna a factor
df[categorical_cols] <- lapply(df[categorical_cols], as.factor)
# Resumen
summary(df)
table(df,country)
table(df(country)
table(df$country)
colSums(is.na(df)) #Verificamos los valores nulos por columnas
table(df$country)
View(df)
colSums(is.na(df)) #Verificamos los valores nulos por columnas
# Convertimos los valores NULL a vacios para un mejor manejo de los datos
df[df == 'NULL']<-NA
#Verificamos nuevamente los valores nulos por columnas
colSums(is.na(df))
aggr(df,numbers = T, sortVar=T)
df$children[is.na(df$children)] <- round(mean(df$children), na.rm=TRUE)
df$children[is.na(df$children)] <- round(mean(df$children), na.rm =TRUE)
df$children[is.na(df$children)] <- round(mean(df$children, na.rm =TRUE))
df$children[is.na(df$children)] <- round(mean(df$children, na.rm =TRUE))
df$children[is.na(df$children)] <- round(mean(df$children, na.rm = TRUE))
#- Resumen
summary(df)
#Verificamos nuevamente los valores nulos por columnas
colSums(is.na(df))
View(df)
library(mlr)
sapply(df,class) # Verificamos los cambios del tipo en la variables
table(df$agent)
table(df$company)
table(df$children)
df <- impute(df,
cols = list(country = imputeMode()))
table(df$country)
table(df$country)
#- Identificacion de datos faltantes
#Verificamos los valores nulos por columnas
colSums(is.na(df))
#Verificamos nuevamente los valores nulos por columnas
colSums(is.na(df))
#- Resumen
summary(df)
rm(list=ls(all=TRUE))
graphics.off()
cat("\014")
rm(list=ls(all=TRUE))
graphics.off()
cat("\014")
rm(list=ls(all=TRUE))
graphics.off()
cat("\014")
# Librerias Utilizadas en el proyecto
library(ggplot2)
library(cowplot)
library(patchwork)
library(VIM) # muestra la tabla de faltantes
library(mlr) # para imputnar valores
setwd("~/Desktop/1ACC0216-TB1-2025-1/data") #Directorio
df <- read.csv("hotel_bookings.csv", header=TRUE, stringsAsFactors = FALSE)
#Cambio de los tipos de datos
# Lista de columnas categóricas
categorical_cols <- c(
"hotel", "meal", "country", "market_segment",
"distribution_channel", "is_repeated_guest", "reserved_room_type", "assigned_room_type",
"deposit_type", "agent", "company", "customer_type", "reservation_status"
)
# Convertir cada columna a factor
df[categorical_cols] <- lapply(df[categorical_cols], as.factor)
# Convetir a Date
df$reservation_status_date <- as.Date(df$reservation_status_date)
str(df) # Verificamos la nueva estructura de los datos
table(duplicated(df)) # Nos mostrara la cantidad de datos duplicados en TRUE
df<- unique(df) # Eliminamos duplicados
table(duplicated(df)) #Verificamos nuevamente los valores duplicados
#- Identificacion de datos faltantes
#Verificamos los valores nulos por columnas
colSums(is.na(df))
#Convertimos los valores NULL a vacios para un mejor manejo de los datos
df[df == 'NULL']<-NA
#Verificamos nuevamente los valores nulos por columnas
colSums(is.na(df))
aggr(df,numbers = T, sortVar=T)
#Verificamos nuevamente los valores nulos por columnas
colSums(is.na(df))
rm(list=ls(all=TRUE))
graphics.off()
cat("\014")
library(VIM) # muestra la tabla de faltantes
library(mlr) # para imputnar valores
setwd("~/Desktop/1ACC0216-TB1-2025-1/data") #Directorio
df <- read.csv("hotel_bookings.csv", header=TRUE, stringsAsFactors = FALSE)
head(df) #Encabezado del df
dim(df) #Dimension del df
names(df) # Nombre de las variables
summary(df) # Resumen estadistico
str(df) #Estructura de los datos
#Cambio de los tipos de datos
# Lista de columnas categóricas
categorical_cols <- c(
"hotel", "meal", "country", "market_segment",
"distribution_channel", "is_repeated_guest", "reserved_room_type", "assigned_room_type",
"deposit_type", "agent", "company", "customer_type", "reservation_status"
)
# Convertir cada columna a factor
df[categorical_cols] <- lapply(df[categorical_cols], as.factor)
# Convetir a Date
df$reservation_status_date <- as.Date(df$reservation_status_date)
sapply(df,class) # Verificamos los cambios del tipo en la variables
str(df) # Verificamos la nueva estructura de los datos
table(duplicated(df)) # Nos mostrara la cantidad de datos duplicados en TRUE
df<- unique(df) # Eliminamos duplicados
table(duplicated(df)) #Verificamos nuevamente los valores duplicados
#- Resumen
summary(df)
#- Identificacion de datos faltantes
#Verificamos los valores nulos por columnas
colSums(is.na(df))
#Observamos el contenido para un mayor analisis
View(df)
#Convertimos los valores NULL a vacios para un mejor manejo de los datos
df[df == 'NULL']<-NA
#Verificamos nuevamente los valores nulos por columnas
colSums(is.na(df))
#Convertimos los valores NULL a vacios para un mejor manejo de los datos
df[df == 'NULL'] <- NA
df[] <- lapply(df, function(x) {
if (is.character(x) || is.factor(x)) {
x[x == "NULL"] <- NA
}
return(x)
})
#Verificamos nuevamente los valores nulos por columnas
colSums(is.na(df))
df$children[is.na(df$children)] <- round(mean(df$children, na.rm = TRUE))
# Imputar solo la columna 'country' con la moda, sin usar `na.rm`
imputacion <- impute(df,
cols = list(country = imputeMode()))
# Extraemos el data.frame limpio
df <- imputacion$data
table(df$country)
df$agent[is.na(df$agent)] <- "No Agent"
df$agent[is.na(df$agent)] <- "No Agent"
levels(df$agent) <- c(levels(df$agent), "No Agent")
df$agent[is.na(df$agent)] <- "No Agent"
df$company <- NULL
str(df)
name(df)
name(df)
names(df)
# Verificamos los valores nulos nuevamente
colSums(is.na(df))
print(table(data[[var]]))
library(dplyr)
library(lubridate)
library(DescTools)
cat_vars <- names(data)[sapply(data, function(x) class(x) %in% c("character", "factor"))]
for (var in cat_vars) {
cat("\nResumen de:", var, "\n")
print(table(data[[var]]))
print(prop.table(table(data[[var]])))
}
meses <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
cat_vars <- names(data)[sapply(data, function(x) class(x) %in% c("character", "factor"))]
for (var in cat_vars) {
cat("\nResumen de:", var, "\n")
print(table(data[[var]]))
print(prop.table(table(data[[var]])))
}
cat_vars <- names(df)[sapply(df, function(x) class(x) %in% c("character", "factor"))]
for (var in cat_vars) {
cat("\nResumen de:", var, "\n")
print(table(df[[var]]))
print(prop.table(table(df[[var]])))
}
summary(df)
summary(df[, sapply(data, is.numeric)])
summary(df[, sapply(data, is.character)])
sapply(df, function(x) sum(is.na(x))/length(x)) * 100
#Visualizar outliers con boxplots
boxplot(df$lead_time, main = "Outliers en lead_time", horizontal = TRUE)
boxplot(df$adr, main = "Outliers en ADR", horizontal = TRUE)
boxplot(df$adults, main = "Outliers en adultos", horizontal = TRUE)
#Visualizar outliers con boxplots
boxplot(df$lead_time, main = "Outliers en lead_time", horizontal = TRUE)
boxplot(df$adults, main = "Outliers en adultos", horizontal = TRUE)
identify_outliers <- function(x) {
Q1 <- quantile(x, .25, na.rm=TRUE)
Q3 <- quantile(x, .75, na.rm=TRUE)
IQR <- Q3 - Q1
lower <- Q1 - 1.5*IQR
upper <- Q3 + 1.5*IQR
x[x < lower | x > upper]
}
boxplot(df$adr, main = "Outliers en ADR", horizontal = TRUE)
#Visualizar outliers con boxplots
boxplot(df$lead_time, main = "Outliers en lead_time", horizontal = TRUE)
boxplot(df$adr, main = "Outliers en ADR", horizontal = TRUE)
print(summary(data[[v]]))
# Winsorización
winsorize <- function(x, probs = c(0.01, 0.99)) {
qs <- quantile(x, probs, na.rm = TRUE)
x[x < qs[1]] <- qs[1]
x[x > qs[2]] <- qs[2]
x
}
data[[col]] <- winsorize(data[[col]], probs = c(0.01, 0.99))
summary(data[, num_vars])
par(mfrow = c(2, 3))
for (v in num_vars) {
boxplot(data[[v]], main = paste("Boxplot de", v))
}
par(mfrow = c(1, 1))
for (v in num_vars) {
n_out <- length(identify_outliers(data[[v]]))
cat("Outliers en", v, ":", n_out, "\n")
}
identify_outliers <- function(x) {
Q1 <- quantile(x, .25, na.rm=TRUE)
Q3 <- quantile(x, .75, na.rm=TRUE)
IQR <- Q3 - Q1
lower <- Q1 - 1.5*IQR
upper <- Q3 + 1.5*IQR
x[x < lower | x > upper]
}
num_vars <- c("lead_time", "adr", "children", "babies", "adults")
for (v in num_vars) {
cat("\n--- Variable:", v, "---\n")
print(summary(df[[v]]))
boxplot(df[[v]], main = paste("Boxplot de", v))
}
# Winsorización
winsorize <- function(x, probs = c(0.01, 0.99)) {
qs <- quantile(x, probs, na.rm = TRUE)
x[x < qs[1]] <- qs[1]
x[x > qs[2]] <- qs[2]
x
}
for (col in num_vars) {
df[[col]] <- winsorize(df[[col]], probs = c(0.01, 0.99))
}
summary(df[, num_vars])
par(mfrow = c(2, 3))
for (v in num_vars) {
boxplot(df[[v]], main = paste("Boxplot de", v))
}
par(mfrow = c(1, 1))
for (v in num_vars) {
n_out <- length(identify_outliers(df[[v]]))
cat("Outliers en", v, ":", n_out, "\n")
}
df[df$adr > 5000, ]
df[df$adr > 5000, ]
str(df)
summary(df)
boxplot(df$adr, main = "Outliers en ADR", horizontal = TRUE)
dim(df)
# Ver percentiles antes y después
quantile(df$adr, probs = c(0.01, 0.99), na.rm = TRUE)
meses <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Convertir los meses de texto a números
df$arrival_date_month_num <- match(df$arrival_date_month, meses)
# Crear la nueva columna de fecha
df$arrival_date <- as.Date(paste(df$arrival_date_year, df$arrival_date_month_num, df$arrival_date_day_of_month, sep = "-"), "%Y-%m-%d")
# Eliminar la columna temporal de mes numérico
df$arrival_date_month_num <- NULL
# Verificar la nueva columna
head(df$arrival_date)
# Crear variable de estadía total
df$stay_total <- df$stays_in_weekend_nights + df$stays_in_week_nights
summary(df)
colSums(is.na(df))
sapply(df,class)
# Guardamos la data limpia
write.csv(dflimpio, "hotel_bookings_limpio.csv", row.names = FALSE)
# Guardamos la data limpia
write.csv(df, "hotel_bookings_limpio.csv", row.names = FALSE)
# ----- VISUALIZACION DE DATOS -----
print('Hola')
# ----- VISUALIZACION DE DATOS -----
cat('Hola')
cat("\014")
# ----- VISUALIZACION DE DATOS -----
cat('¿Cuántas reservas se realizan por tipo de hotel? ¿Qué tipo de hotel prefiere la gente?')
reservas_por_hotel <- data %>%
group_by(hotel) %>%
summarise(cantidad = n()) %>%
arrange(desc(cantidad))
# Librerias Utilizadas en el proyecto
library(ggplot2)
library(cowplot)
library(patchwork)
library(VIM) # muestra la tabla de faltantes
library(mlr) # para imputnar valores
library(dplyr)
library(lubridate)
library(DescTools)
head(df)
reservas_por_hotel <- data %>%
group_by(hotel) %>%
summarise(cantidad = n()) %>%
arrange(desc(cantidad))
print(reservas_por_hotel)
ggplot(reservas_por_hotel, aes(x = hotel, y = cantidad, fill = hotel)) +
geom_col() +
labs(title = "Cantidad de Reservas por Tipo de Hotel", x = "Tipo de Hotel", y = "Cantidad de Reservas") +
theme_minimal()
reservas_por_hotel <- df %>%
group_by(hotel) %>%
summarise(cantidad = n()) %>%
arrange(desc(cantidad))
print(reservas_por_hotel)
reservas_por_hotel
ggplot(reservas_por_hotel, aes(x = hotel, y = cantidad, fill = hotel)) +
geom_col() +
labs(title = "Cantidad de Reservas por Tipo de Hotel", x = "Tipo de Hotel", y = "Cantidad de Reservas") +
theme_minimal()
